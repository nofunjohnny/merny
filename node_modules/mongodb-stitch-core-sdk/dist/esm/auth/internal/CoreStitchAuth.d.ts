import { Decoder } from "../../internal/common/Codec";
import { Storage } from "../../internal/common/Storage";
import Response from "../../internal/net/Response";
import Stream from "../../Stream";
import EventStream from "../../internal/net/EventStream";
import { StitchAuthRequest } from "../../internal/net/StitchAuthRequest";
import StitchRequestClient from "../../internal/net/StitchRequestClient";
import StitchCredential from "../StitchCredential";
import AuthInfo from "./AuthInfo";
import CoreStitchUser from "./CoreStitchUser";
import StitchAuthRequestClient from "./StitchAuthRequestClient";
import { StitchAuthRoutes } from "./StitchAuthRoutes";
import StitchUserFactory from "./StitchUserFactory";
import { AuthEvent } from "./AuthEvent";
export default abstract class CoreStitchAuth<TStitchUser extends CoreStitchUser> implements StitchAuthRequestClient {
    readonly authInfo: AuthInfo;
    private activeUserAuthInfo;
    protected readonly requestClient: StitchRequestClient;
    protected readonly authRoutes: StitchAuthRoutes;
    protected abstract userFactory: StitchUserFactory<TStitchUser>;
    protected abstract deviceInfo: {
        [key: string]: string;
    };
    private readonly storage;
    private currentUser?;
    private allUsersAuthInfo;
    private readonly accessTokenRefresher;
    protected constructor(requestClient: StitchRequestClient, authRoutes: StitchAuthRoutes, storage: Storage, useTokenRefresher?: boolean);
    readonly isLoggedIn: boolean;
    readonly user: TStitchUser | undefined;
    listUsers(): Array<TStitchUser>;
    doAuthenticatedRequest(stitchReq: StitchAuthRequest, authInfo?: AuthInfo | undefined): Promise<Response>;
    doAuthenticatedRequestWithDecoder<T>(stitchReq: StitchAuthRequest, decoder?: Decoder<T>): Promise<T>;
    openAuthenticatedEventStream(stitchReq: StitchAuthRequest, open?: boolean): Promise<EventStream>;
    openAuthenticatedStreamWithDecoder<T>(stitchReq: StitchAuthRequest, decoder?: Decoder<T>): Promise<Stream<T>>;
    refreshAccessToken(): Promise<void>;
    switchToUserWithId(userId: string): TStitchUser;
    loginWithCredentialInternal(credential: StitchCredential): Promise<TStitchUser>;
    linkUserWithCredentialInternal(user: CoreStitchUser, credential: StitchCredential): Promise<TStitchUser>;
    logoutInternal(): Promise<void>;
    logoutUserWithIdInternal(userId: string): Promise<void>;
    removeUserInternal(): Promise<void>;
    removeUserWithIdInternal(userId: string): Promise<void>;
    readonly hasDeviceId: boolean;
    protected readonly deviceId: string | undefined;
    protected abstract onAuthEvent(): any;
    protected abstract dispatchAuthEvent(event: AuthEvent<TStitchUser>): any;
    private prepareAuthRequest;
    private handleAuthFailureForEventStream;
    private handleAuthFailure;
    private tryRefreshAccessToken;
    private prepUser;
    private attachAuthOptions;
    private doLogin;
    private doLoginRequest;
    private processLogin;
    private processLoginResponse;
    private doGetUserProfile;
    private doLogout;
    private clearActiveUserAuth;
    close(): void;
    private clearUserAuthTokens;
}
